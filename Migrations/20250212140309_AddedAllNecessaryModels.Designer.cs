// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecruitmentManagement.Models;

#nullable disable

namespace RecruitmentManagement.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250212140309_AddedAllNecessaryModels")]
    partial class AddedAllNecessaryModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "User",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "Organisation",
                            Name = "Organisation",
                            NormalizedName = "ORGANISATION"
                        },
                        new
                        {
                            Id = "Employee",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "Candidate",
                            Name = "Candidate",
                            NormalizedName = "CANDIDATE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecruitmentManagement.Models.CandidateDocs", b =>
                {
                    b.Property<string>("candidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("documentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("verifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("documentLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("isVerified")
                        .HasColumnType("bit");

                    b.HasKey("candidateId", "documentTypeId", "verifiedById");

                    b.HasIndex("documentTypeId");

                    b.HasIndex("verifiedById");

                    b.ToTable("candidateDocs");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.CandidateSkill", b =>
                {
                    b.Property<string>("candidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("skillId")
                        .HasColumnType("int");

                    b.HasKey("candidateId", "skillId");

                    b.HasIndex("skillId");

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.DocumentType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("documentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.InterviewType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("interviewType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("InterviewTypes");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobCandidate", b =>
                {
                    b.Property<int>("jobOpeningId")
                        .HasColumnType("int");

                    b.Property<string>("candidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("isSelected")
                        .HasColumnType("bit");

                    b.Property<int>("noOfInterviewRounds")
                        .HasColumnType("int");

                    b.HasKey("jobOpeningId", "candidateId");

                    b.HasIndex("candidateId");

                    b.ToTable("JobCandidates");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobOpening", b =>
                {
                    b.Property<int>("JobOpeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobOpeningId"));

                    b.Property<string>("addtionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("deadLine")
                        .HasColumnType("datetime2");

                    b.Property<int>("experienceRequired")
                        .HasColumnType("int");

                    b.Property<string>("jobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("jobStatusId")
                        .HasColumnType("int");

                    b.Property<int>("jobTypeId")
                        .HasColumnType("int");

                    b.Property<double>("maxSalary")
                        .HasColumnType("float");

                    b.Property<double>("minSalary")
                        .HasColumnType("float");

                    b.Property<string>("organisationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("positionId")
                        .HasColumnType("int");

                    b.Property<int>("requiredCandidates")
                        .HasColumnType("int");

                    b.HasKey("JobOpeningId");

                    b.HasIndex("jobStatusId");

                    b.HasIndex("jobTypeId");

                    b.HasIndex("organisationId");

                    b.HasIndex("positionId");

                    b.ToTable("JobOpenings");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobSkill", b =>
                {
                    b.Property<int>("jobOpeningId")
                        .HasColumnType("int");

                    b.Property<int>("skillId")
                        .HasColumnType("int");

                    b.Property<int>("jobSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("jobOpeningId", "skillId");

                    b.HasIndex("jobSkillId");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("JobStatuses");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.OrganisationType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("organisationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("OrganisationTypes");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Position", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.RoundHandler", b =>
                {
                    b.Property<string>("employeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("scheduledInterviewJobOpeningId")
                        .HasColumnType("int");

                    b.Property<string>("scheduledInterviewCandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("scheduledInterviewInterviewTypeId")
                        .HasColumnType("int");

                    b.Property<int>("roundHandlerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roundHandlerId"));

                    b.HasKey("employeeId", "scheduledInterviewJobOpeningId", "scheduledInterviewCandidateId", "scheduledInterviewInterviewTypeId");

                    b.HasIndex("scheduledInterviewJobOpeningId", "scheduledInterviewCandidateId", "scheduledInterviewInterviewTypeId");

                    b.ToTable("RoundHandlers");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.ScheduledInterview", b =>
                {
                    b.Property<int>("jobOpeningId")
                        .HasColumnType("int");

                    b.Property<string>("candidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("interviewTypeId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("interviewDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isCleared")
                        .HasColumnType("bit");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<int>("scheduledInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("scheduledInterviewId"));

                    b.HasKey("jobOpeningId", "candidateId", "interviewTypeId");

                    b.HasIndex("interviewTypeId");

                    b.ToTable("ScheduledInterviews");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Skill", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("skillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Users", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("disableReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("positionId")
                        .HasColumnType("int");

                    b.Property<int>("yearsOfExperience")
                        .HasColumnType("int");

                    b.HasIndex("positionId");

                    b.HasDiscriminator().HasValue("Users");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Candidate", b =>
                {
                    b.HasBaseType("RecruitmentManagement.Models.Users");

                    b.Property<string>("organisationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resumeLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Candidate");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Employee", b =>
                {
                    b.HasBaseType("RecruitmentManagement.Models.Users");

                    b.Property<string>("organisationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("organisationId");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Organisation", b =>
                {
                    b.HasBaseType("RecruitmentManagement.Models.Users");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("organisationTypeId")
                        .HasColumnType("int");

                    b.HasIndex("organisationTypeId");

                    b.HasDiscriminator().HasValue("Organisation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecruitmentManagement.Models.CandidateDocs", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.Candidate", "candidate")
                        .WithMany("candidateDocs")
                        .HasForeignKey("candidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.DocumentType", "documentType")
                        .WithMany("candidateDocs")
                        .HasForeignKey("documentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.Employee", "verifiedBy")
                        .WithMany("candidateDocs")
                        .HasForeignKey("verifiedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("candidate");

                    b.Navigation("documentType");

                    b.Navigation("verifiedBy");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.CandidateSkill", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.Candidate", "candidate")
                        .WithMany("candidateSkills")
                        .HasForeignKey("candidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.Skill", "skill")
                        .WithMany("candidateSkills")
                        .HasForeignKey("skillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("candidate");

                    b.Navigation("skill");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobCandidate", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.Candidate", "candidate")
                        .WithMany("jobCandidates")
                        .HasForeignKey("candidateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.JobOpening", "jobOpening")
                        .WithMany("jobCandidates")
                        .HasForeignKey("jobOpeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("candidate");

                    b.Navigation("jobOpening");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobOpening", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.JobStatus", "jobStatus")
                        .WithMany("jobOpenings")
                        .HasForeignKey("jobStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.JobType", "jobType")
                        .WithMany("jobOpenings")
                        .HasForeignKey("jobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.Organisation", "organisation")
                        .WithMany("jobOpenings")
                        .HasForeignKey("organisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.Position", "position")
                        .WithMany("jobOpenings")
                        .HasForeignKey("positionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jobStatus");

                    b.Navigation("jobType");

                    b.Navigation("organisation");

                    b.Navigation("position");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobSkill", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.JobOpening", "jobOpening")
                        .WithMany("jobSkills")
                        .HasForeignKey("jobOpeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.Skill", "skill")
                        .WithMany("jobSkills")
                        .HasForeignKey("jobSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jobOpening");

                    b.Navigation("skill");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.RoundHandler", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.Employee", "employee")
                        .WithMany("roundHandlers")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.ScheduledInterview", "scheduledInterview")
                        .WithMany("roundHandlers")
                        .HasForeignKey("scheduledInterviewJobOpeningId", "scheduledInterviewCandidateId", "scheduledInterviewInterviewTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("scheduledInterview");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.ScheduledInterview", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.InterviewType", "interviewType")
                        .WithMany("scheduledInterviews")
                        .HasForeignKey("interviewTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RecruitmentManagement.Models.JobCandidate", "jobCandidate")
                        .WithMany("scheduledInterviews")
                        .HasForeignKey("jobOpeningId", "candidateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("interviewType");

                    b.Navigation("jobCandidate");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Users", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.Position", "position")
                        .WithMany("users")
                        .HasForeignKey("positionId");

                    b.Navigation("position");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Employee", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.Organisation", "organisation")
                        .WithMany("employees")
                        .HasForeignKey("organisationId");

                    b.Navigation("organisation");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Organisation", b =>
                {
                    b.HasOne("RecruitmentManagement.Models.OrganisationType", "organisationType")
                        .WithMany("organisations")
                        .HasForeignKey("organisationTypeId");

                    b.Navigation("organisationType");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.DocumentType", b =>
                {
                    b.Navigation("candidateDocs");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.InterviewType", b =>
                {
                    b.Navigation("scheduledInterviews");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobCandidate", b =>
                {
                    b.Navigation("scheduledInterviews");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobOpening", b =>
                {
                    b.Navigation("jobCandidates");

                    b.Navigation("jobSkills");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobStatus", b =>
                {
                    b.Navigation("jobOpenings");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.JobType", b =>
                {
                    b.Navigation("jobOpenings");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.OrganisationType", b =>
                {
                    b.Navigation("organisations");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Position", b =>
                {
                    b.Navigation("jobOpenings");

                    b.Navigation("users");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.ScheduledInterview", b =>
                {
                    b.Navigation("roundHandlers");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Skill", b =>
                {
                    b.Navigation("candidateSkills");

                    b.Navigation("jobSkills");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Candidate", b =>
                {
                    b.Navigation("candidateDocs");

                    b.Navigation("candidateSkills");

                    b.Navigation("jobCandidates");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Employee", b =>
                {
                    b.Navigation("candidateDocs");

                    b.Navigation("roundHandlers");
                });

            modelBuilder.Entity("RecruitmentManagement.Models.Organisation", b =>
                {
                    b.Navigation("employees");

                    b.Navigation("jobOpenings");
                });
#pragma warning restore 612, 618
        }
    }
}
